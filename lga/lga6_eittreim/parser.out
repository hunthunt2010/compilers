Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Start
Rule 1     Start -> Stmt
Rule 2     Stmt -> id assign E
Rule 3     Stmt -> if lparen E rparen Stmt else Stmt fi
Rule 4     Stmt -> if lparen E rparen Stmt fi
Rule 5     Stmt -> while lparen E rparen do Stmt od
Rule 6     Stmt -> begin Stmts end
Rule 7     Stmts -> Stmts semi Stmt
Rule 8     Stmts -> Stmt
Rule 9     E -> E plus T
Rule 10    E -> T
Rule 11    T -> id
Rule 12    T -> num

Terminals, with rules where they appear

assign               : 2
begin                : 6
do                   : 5
else                 : 3
end                  : 6
error                : 
fi                   : 3 4
id                   : 2 11
if                   : 3 4
lparen               : 3 4 5
num                  : 12
od                   : 5
plus                 : 9
rparen               : 3 4 5
semi                 : 7
while                : 5

Nonterminals, with rules where they appear

E                    : 2 3 4 5 9
Start                : 0
Stmt                 : 1 3 3 4 5 7 8
Stmts                : 6 7
T                    : 9 10

Parsing method: LALR

state 0

    (0) S' -> . Start
    (1) Start -> . Stmt
    (2) Stmt -> . id assign E
    (3) Stmt -> . if lparen E rparen Stmt else Stmt fi
    (4) Stmt -> . if lparen E rparen Stmt fi
    (5) Stmt -> . while lparen E rparen do Stmt od
    (6) Stmt -> . begin Stmts end

    id              shift and go to state 5
    if              shift and go to state 6
    while           shift and go to state 4
    begin           shift and go to state 1

    Start                          shift and go to state 3
    Stmt                           shift and go to state 2

state 1

    (6) Stmt -> begin . Stmts end
    (7) Stmts -> . Stmts semi Stmt
    (8) Stmts -> . Stmt
    (2) Stmt -> . id assign E
    (3) Stmt -> . if lparen E rparen Stmt else Stmt fi
    (4) Stmt -> . if lparen E rparen Stmt fi
    (5) Stmt -> . while lparen E rparen do Stmt od
    (6) Stmt -> . begin Stmts end

    id              shift and go to state 5
    if              shift and go to state 6
    while           shift and go to state 4
    begin           shift and go to state 1

    Stmts                          shift and go to state 7
    Stmt                           shift and go to state 8

state 2

    (1) Start -> Stmt .

    $end            reduce using rule 1 (Start -> Stmt .)


state 3

    (0) S' -> Start .



state 4

    (5) Stmt -> while . lparen E rparen do Stmt od

    lparen          shift and go to state 9


state 5

    (2) Stmt -> id . assign E

    assign          shift and go to state 10


state 6

    (3) Stmt -> if . lparen E rparen Stmt else Stmt fi
    (4) Stmt -> if . lparen E rparen Stmt fi

    lparen          shift and go to state 11


state 7

    (6) Stmt -> begin Stmts . end
    (7) Stmts -> Stmts . semi Stmt

    end             shift and go to state 12
    semi            shift and go to state 13


state 8

    (8) Stmts -> Stmt .

    end             reduce using rule 8 (Stmts -> Stmt .)
    semi            reduce using rule 8 (Stmts -> Stmt .)


state 9

    (5) Stmt -> while lparen . E rparen do Stmt od
    (9) E -> . E plus T
    (10) E -> . T
    (11) T -> . id
    (12) T -> . num

    id              shift and go to state 17
    num             shift and go to state 14

    E                              shift and go to state 16
    T                              shift and go to state 15

state 10

    (2) Stmt -> id assign . E
    (9) E -> . E plus T
    (10) E -> . T
    (11) T -> . id
    (12) T -> . num

    id              shift and go to state 17
    num             shift and go to state 14

    E                              shift and go to state 18
    T                              shift and go to state 15

state 11

    (3) Stmt -> if lparen . E rparen Stmt else Stmt fi
    (4) Stmt -> if lparen . E rparen Stmt fi
    (9) E -> . E plus T
    (10) E -> . T
    (11) T -> . id
    (12) T -> . num

    id              shift and go to state 17
    num             shift and go to state 14

    E                              shift and go to state 19
    T                              shift and go to state 15

state 12

    (6) Stmt -> begin Stmts end .

    od              reduce using rule 6 (Stmt -> begin Stmts end .)
    end             reduce using rule 6 (Stmt -> begin Stmts end .)
    semi            reduce using rule 6 (Stmt -> begin Stmts end .)
    $end            reduce using rule 6 (Stmt -> begin Stmts end .)
    else            reduce using rule 6 (Stmt -> begin Stmts end .)
    fi              reduce using rule 6 (Stmt -> begin Stmts end .)


state 13

    (7) Stmts -> Stmts semi . Stmt
    (2) Stmt -> . id assign E
    (3) Stmt -> . if lparen E rparen Stmt else Stmt fi
    (4) Stmt -> . if lparen E rparen Stmt fi
    (5) Stmt -> . while lparen E rparen do Stmt od
    (6) Stmt -> . begin Stmts end

    id              shift and go to state 5
    if              shift and go to state 6
    while           shift and go to state 4
    begin           shift and go to state 1

    Stmt                           shift and go to state 20

state 14

    (12) T -> num .

    rparen          reduce using rule 12 (T -> num .)
    plus            reduce using rule 12 (T -> num .)
    $end            reduce using rule 12 (T -> num .)
    end             reduce using rule 12 (T -> num .)
    semi            reduce using rule 12 (T -> num .)
    else            reduce using rule 12 (T -> num .)
    fi              reduce using rule 12 (T -> num .)
    od              reduce using rule 12 (T -> num .)


state 15

    (10) E -> T .

    rparen          reduce using rule 10 (E -> T .)
    plus            reduce using rule 10 (E -> T .)
    $end            reduce using rule 10 (E -> T .)
    end             reduce using rule 10 (E -> T .)
    semi            reduce using rule 10 (E -> T .)
    else            reduce using rule 10 (E -> T .)
    fi              reduce using rule 10 (E -> T .)
    od              reduce using rule 10 (E -> T .)


state 16

    (5) Stmt -> while lparen E . rparen do Stmt od
    (9) E -> E . plus T

    rparen          shift and go to state 21
    plus            shift and go to state 22


state 17

    (11) T -> id .

    rparen          reduce using rule 11 (T -> id .)
    plus            reduce using rule 11 (T -> id .)
    $end            reduce using rule 11 (T -> id .)
    end             reduce using rule 11 (T -> id .)
    semi            reduce using rule 11 (T -> id .)
    else            reduce using rule 11 (T -> id .)
    fi              reduce using rule 11 (T -> id .)
    od              reduce using rule 11 (T -> id .)


state 18

    (2) Stmt -> id assign E .
    (9) E -> E . plus T

    od              reduce using rule 2 (Stmt -> id assign E .)
    end             reduce using rule 2 (Stmt -> id assign E .)
    semi            reduce using rule 2 (Stmt -> id assign E .)
    $end            reduce using rule 2 (Stmt -> id assign E .)
    else            reduce using rule 2 (Stmt -> id assign E .)
    fi              reduce using rule 2 (Stmt -> id assign E .)
    plus            shift and go to state 22


state 19

    (3) Stmt -> if lparen E . rparen Stmt else Stmt fi
    (4) Stmt -> if lparen E . rparen Stmt fi
    (9) E -> E . plus T

    rparen          shift and go to state 23
    plus            shift and go to state 22


state 20

    (7) Stmts -> Stmts semi Stmt .

    end             reduce using rule 7 (Stmts -> Stmts semi Stmt .)
    semi            reduce using rule 7 (Stmts -> Stmts semi Stmt .)


state 21

    (5) Stmt -> while lparen E rparen . do Stmt od

    do              shift and go to state 24


state 22

    (9) E -> E plus . T
    (11) T -> . id
    (12) T -> . num

    id              shift and go to state 17
    num             shift and go to state 14

    T                              shift and go to state 25

state 23

    (3) Stmt -> if lparen E rparen . Stmt else Stmt fi
    (4) Stmt -> if lparen E rparen . Stmt fi
    (2) Stmt -> . id assign E
    (3) Stmt -> . if lparen E rparen Stmt else Stmt fi
    (4) Stmt -> . if lparen E rparen Stmt fi
    (5) Stmt -> . while lparen E rparen do Stmt od
    (6) Stmt -> . begin Stmts end

    id              shift and go to state 5
    if              shift and go to state 6
    while           shift and go to state 4
    begin           shift and go to state 1

    Stmt                           shift and go to state 26

state 24

    (5) Stmt -> while lparen E rparen do . Stmt od
    (2) Stmt -> . id assign E
    (3) Stmt -> . if lparen E rparen Stmt else Stmt fi
    (4) Stmt -> . if lparen E rparen Stmt fi
    (5) Stmt -> . while lparen E rparen do Stmt od
    (6) Stmt -> . begin Stmts end

    id              shift and go to state 5
    if              shift and go to state 6
    while           shift and go to state 4
    begin           shift and go to state 1

    Stmt                           shift and go to state 27

state 25

    (9) E -> E plus T .

    rparen          reduce using rule 9 (E -> E plus T .)
    plus            reduce using rule 9 (E -> E plus T .)
    $end            reduce using rule 9 (E -> E plus T .)
    end             reduce using rule 9 (E -> E plus T .)
    semi            reduce using rule 9 (E -> E plus T .)
    else            reduce using rule 9 (E -> E plus T .)
    fi              reduce using rule 9 (E -> E plus T .)
    od              reduce using rule 9 (E -> E plus T .)


state 26

    (3) Stmt -> if lparen E rparen Stmt . else Stmt fi
    (4) Stmt -> if lparen E rparen Stmt . fi

    else            shift and go to state 28
    fi              shift and go to state 29


state 27

    (5) Stmt -> while lparen E rparen do Stmt . od

    od              shift and go to state 30


state 28

    (3) Stmt -> if lparen E rparen Stmt else . Stmt fi
    (2) Stmt -> . id assign E
    (3) Stmt -> . if lparen E rparen Stmt else Stmt fi
    (4) Stmt -> . if lparen E rparen Stmt fi
    (5) Stmt -> . while lparen E rparen do Stmt od
    (6) Stmt -> . begin Stmts end

    id              shift and go to state 5
    if              shift and go to state 6
    while           shift and go to state 4
    begin           shift and go to state 1

    Stmt                           shift and go to state 31

state 29

    (4) Stmt -> if lparen E rparen Stmt fi .

    od              reduce using rule 4 (Stmt -> if lparen E rparen Stmt fi .)
    end             reduce using rule 4 (Stmt -> if lparen E rparen Stmt fi .)
    semi            reduce using rule 4 (Stmt -> if lparen E rparen Stmt fi .)
    $end            reduce using rule 4 (Stmt -> if lparen E rparen Stmt fi .)
    else            reduce using rule 4 (Stmt -> if lparen E rparen Stmt fi .)
    fi              reduce using rule 4 (Stmt -> if lparen E rparen Stmt fi .)


state 30

    (5) Stmt -> while lparen E rparen do Stmt od .

    od              reduce using rule 5 (Stmt -> while lparen E rparen do Stmt od .)
    end             reduce using rule 5 (Stmt -> while lparen E rparen do Stmt od .)
    semi            reduce using rule 5 (Stmt -> while lparen E rparen do Stmt od .)
    $end            reduce using rule 5 (Stmt -> while lparen E rparen do Stmt od .)
    else            reduce using rule 5 (Stmt -> while lparen E rparen do Stmt od .)
    fi              reduce using rule 5 (Stmt -> while lparen E rparen do Stmt od .)


state 31

    (3) Stmt -> if lparen E rparen Stmt else Stmt . fi

    fi              shift and go to state 32


state 32

    (3) Stmt -> if lparen E rparen Stmt else Stmt fi .

    od              reduce using rule 3 (Stmt -> if lparen E rparen Stmt else Stmt fi .)
    end             reduce using rule 3 (Stmt -> if lparen E rparen Stmt else Stmt fi .)
    semi            reduce using rule 3 (Stmt -> if lparen E rparen Stmt else Stmt fi .)
    $end            reduce using rule 3 (Stmt -> if lparen E rparen Stmt else Stmt fi .)
    else            reduce using rule 3 (Stmt -> if lparen E rparen Stmt else Stmt fi .)
    fi              reduce using rule 3 (Stmt -> if lparen E rparen Stmt else Stmt fi .)

