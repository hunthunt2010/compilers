
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xfd\xb9\xf6R}f<\xa2\xb8;\xeaZ\xe2d\xe2\xa7'
    
_lr_action_items = {'type_int':([0,19,34,37,39,],[12,12,12,12,12,]),'return':([0,19,34,37,39,],[10,10,10,10,10,]),'lparen':([7,],[20,]),'semi':([1,2,4,5,6,8,9,11,14,16,17,23,24,30,31,32,35,38,],[-6,-17,19,-7,-14,-16,-5,-20,-15,-8,-13,-15,-9,-19,-18,-11,-10,41,]),'assignment':([14,17,26,],[25,-13,33,]),'constant_int':([0,10,19,20,21,22,25,33,34,37,39,],[11,11,11,11,11,11,11,11,11,11,11,]),'rcurbrace':([15,19,27,36,40,41,42,43,],[-4,-3,-2,-24,43,-23,-25,-22,]),'else':([36,41,43,],[39,-23,-22,]),'lcurbrace':([34,39,],[37,37,]),'lshift':([2,6,8,9,11,14,17,23,24,29,30,31,32,35,],[-17,-14,-16,22,-20,-15,-13,-15,22,22,22,22,22,22,]),'greater_than':([2,6,8,9,11,14,17,23,24,29,30,31,32,35,],[-17,-14,-16,21,-20,-15,-13,-15,21,21,21,21,21,21,]),'rparen':([2,6,8,11,17,23,28,29,30,31,],[-17,-14,-16,-20,-13,-15,34,-21,-19,-18,]),'identifier':([0,10,12,18,19,20,21,22,25,33,34,37,39,],[17,17,-12,17,17,17,17,17,17,17,17,17,17,]),'$end':([3,13,15,19,27,36,41,42,43,],[-1,0,-4,-3,-2,-24,-23,-25,-22,]),'if':([0,19,37,],[7,7,7,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'DECL':([0,19,34,37,39,],[1,1,1,1,1,]),'OPERATION_BINARY':([0,10,19,20,21,22,25,33,34,37,39,],[2,2,2,2,2,2,2,2,2,2,2,]),'STATEMENTS':([0,19,37,],[3,27,40,]),'TYPE':([0,19,34,37,39,],[18,18,18,18,18,]),'ASSIGNMENT':([0,19,34,37,39,],[5,5,5,5,5,]),'START':([0,],[13,]),'CONSTANT':([0,10,19,20,21,22,25,33,34,37,39,],[6,6,6,6,6,6,6,6,6,6,6,]),'BOOLEAN':([20,],[28,]),'STATEMENT':([0,19,34,37,39,],[4,4,38,4,38,]),'VARIABLE':([0,10,18,19,20,21,22,25,33,34,37,39,],[14,23,26,14,23,23,23,23,23,14,14,14,]),'RETURN':([0,19,34,37,39,],[16,16,16,16,16,]),'OPERATION':([0,10,19,20,21,22,25,33,34,37,39,],[8,8,8,8,8,8,8,8,8,8,8,]),'CODEBLOCK':([34,39,],[36,42,]),'EXPRESSION':([0,10,19,20,21,22,25,33,34,37,39,],[9,24,9,29,30,31,32,35,9,9,9,]),'IF':([0,19,37,],[15,15,15,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> START","S'",1,None,None,None),
  ('START -> STATEMENTS','START',1,'p_START','ast3.py',68),
  ('STATEMENTS -> STATEMENT semi STATEMENTS','STATEMENTS',3,'p_STATEMENTS','ast3.py',72),
  ('STATEMENTS -> STATEMENT semi','STATEMENTS',2,'p_STATEMENTS','ast3.py',73),
  ('STATEMENTS -> IF','STATEMENTS',1,'p_STATEMENTS','ast3.py',74),
  ('STATEMENT -> EXPRESSION','STATEMENT',1,'p_STATEMENT','ast3.py',78),
  ('STATEMENT -> DECL','STATEMENT',1,'p_STATEMENT','ast3.py',79),
  ('STATEMENT -> ASSIGNMENT','STATEMENT',1,'p_STATEMENT','ast3.py',80),
  ('STATEMENT -> RETURN','STATEMENT',1,'p_STATEMENT','ast3.py',81),
  ('RETURN -> return EXPRESSION','RETURN',2,'p_RETURN','ast3.py',85),
  ('DECL -> TYPE VARIABLE assignment EXPRESSION','DECL',4,'p_DECL','ast3.py',89),
  ('ASSIGNMENT -> VARIABLE assignment EXPRESSION','ASSIGNMENT',3,'p_ASSIGNMENT','ast3.py',93),
  ('TYPE -> type_int','TYPE',1,'p_TYPE','ast3.py',97),
  ('VARIABLE -> identifier','VARIABLE',1,'p_VARIABLE','ast3.py',101),
  ('EXPRESSION -> CONSTANT','EXPRESSION',1,'p_EXPRESSION','ast3.py',105),
  ('EXPRESSION -> VARIABLE','EXPRESSION',1,'p_EXPRESSION','ast3.py',106),
  ('EXPRESSION -> OPERATION','EXPRESSION',1,'p_EXPRESSION','ast3.py',107),
  ('OPERATION -> OPERATION_BINARY','OPERATION',1,'p_OPERATION','ast3.py',111),
  ('OPERATION_BINARY -> EXPRESSION lshift EXPRESSION','OPERATION_BINARY',3,'p_OPERATION_BINARY','ast3.py',116),
  ('OPERATION_BINARY -> EXPRESSION greater_than EXPRESSION','OPERATION_BINARY',3,'p_OPERATION_BINARY','ast3.py',117),
  ('CONSTANT -> constant_int','CONSTANT',1,'p_CONSTANT','ast3.py',125),
  ('BOOLEAN -> EXPRESSION','BOOLEAN',1,'p_BOOLEAN','ast3.py',130),
  ('CODEBLOCK -> lcurbrace STATEMENTS rcurbrace','CODEBLOCK',3,'p_CODEBLOCK','ast3.py',135),
  ('CODEBLOCK -> STATEMENT semi','CODEBLOCK',2,'p_CODEBLOCK','ast3.py',136),
  ('IF -> if lparen BOOLEAN rparen CODEBLOCK','IF',5,'p_IF','ast3.py',140),
  ('IF -> if lparen BOOLEAN rparen CODEBLOCK else CODEBLOCK','IF',7,'p_IF','ast3.py',141),
]
